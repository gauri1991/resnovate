# Generated by Django 4.2.7 on 2025-10-24 17:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


def create_blogpost_table_if_not_exists(apps, schema_editor):
    """Create BlogPost table only if it doesn't exist"""
    with schema_editor.connection.cursor() as cursor:
        # Check if table exists
        if schema_editor.connection.vendor == 'postgresql':
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables
                    WHERE table_schema = 'public'
                    AND table_name = 'content_blogpost'
                );
            """)
            table_exists = cursor.fetchone()[0]
        elif schema_editor.connection.vendor == 'sqlite':
            cursor.execute("""
                SELECT name FROM sqlite_master
                WHERE type='table' AND name='content_blogpost';
            """)
            table_exists = cursor.fetchone() is not None
        else:
            table_exists = False

        if table_exists:
            print("✓ BlogPost table already exists, skipping creation")
            return

        print("✗ Creating BlogPost table...")

        # Create the table manually for both PostgreSQL and SQLite
        if schema_editor.connection.vendor == 'postgresql':
            cursor.execute("""
                CREATE TABLE content_blogpost (
                    id BIGSERIAL PRIMARY KEY,
                    title VARCHAR(200) NOT NULL,
                    slug VARCHAR(200) UNIQUE NOT NULL,
                    content TEXT NOT NULL,
                    excerpt VARCHAR(500) NOT NULL,
                    featured_image VARCHAR(100),
                    status VARCHAR(20) NOT NULL DEFAULT 'draft',
                    published_at TIMESTAMP WITH TIME ZONE,
                    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    seo_title VARCHAR(200) NOT NULL,
                    seo_description VARCHAR(300) NOT NULL,
                    tags JSONB NOT NULL DEFAULT '[]',
                    read_time INTEGER NOT NULL DEFAULT 5,
                    views INTEGER NOT NULL DEFAULT 0,
                    is_published BOOLEAN NOT NULL DEFAULT FALSE,
                    author_id INTEGER REFERENCES auth_user(id) ON DELETE SET NULL
                );
                CREATE INDEX content_blogpost_slug_idx ON content_blogpost(slug);
                CREATE INDEX content_blogpost_author_id_idx ON content_blogpost(author_id);
                CREATE INDEX content_blogpost_status_idx ON content_blogpost(status);
            """)
        elif schema_editor.connection.vendor == 'sqlite':
            cursor.execute("""
                CREATE TABLE content_blogpost (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title VARCHAR(200) NOT NULL,
                    slug VARCHAR(200) UNIQUE NOT NULL,
                    content TEXT NOT NULL,
                    excerpt VARCHAR(500) NOT NULL,
                    featured_image VARCHAR(100),
                    status VARCHAR(20) NOT NULL DEFAULT 'draft',
                    published_at DATETIME,
                    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    seo_title VARCHAR(200) NOT NULL,
                    seo_description VARCHAR(300) NOT NULL,
                    tags TEXT NOT NULL DEFAULT '[]',
                    read_time INTEGER NOT NULL DEFAULT 5,
                    views INTEGER NOT NULL DEFAULT 0,
                    is_published INTEGER NOT NULL DEFAULT 0,
                    author_id INTEGER REFERENCES auth_user(id) ON DELETE SET NULL
                )
            """)
            cursor.execute("CREATE INDEX content_blogpost_slug_idx ON content_blogpost(slug)")
            cursor.execute("CREATE INDEX content_blogpost_author_id_idx ON content_blogpost(author_id)")
            cursor.execute("CREATE INDEX content_blogpost_status_idx ON content_blogpost(status)")

        print("✓ BlogPost table created successfully")


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('content', '0005_add_sitesettings'),
    ]

    operations = [
        migrations.RunPython(
            create_blogpost_table_if_not_exists,
            migrations.RunPython.noop,
        ),
    ]
