# Generated migration for workflow models

from django.db import migrations, models
import django.db.models.deletion
from django.conf import settings
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('marketing', '0004_conversion_optimization_models'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WorkflowTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('onboarding', 'User Onboarding'), ('nurturing', 'Lead Nurturing'), ('retention', 'Customer Retention'), ('reactivation', 'Win-Back Campaign'), ('upsell', 'Upsell/Cross-sell'), ('event', 'Event Marketing'), ('product_launch', 'Product Launch'), ('seasonal', 'Seasonal Campaign')], max_length=50)),
                ('description', models.TextField()),
                ('template_structure', models.JSONField(default=dict, help_text='Workflow structure template')),
                ('estimated_duration', models.DurationField(help_text='Expected campaign duration')),
                ('target_audience', models.JSONField(default=list, help_text='Suggested target segments')),
                ('success_metrics', models.JSONField(default=list, help_text='Key metrics to track')),
                ('usage_count', models.IntegerField(default=0)),
                ('avg_performance_score', models.FloatField(default=0.0)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-is_featured', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MarketingWorkflow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('workflow_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('trigger_type', models.CharField(choices=[('manual', 'Manual Start'), ('scheduled', 'Scheduled'), ('behavioral', 'Behavioral Trigger'), ('api', 'API Trigger'), ('webhook', 'Webhook')], default='manual', max_length=50)),
                ('trigger_config', models.JSONField(default=dict, help_text='Trigger configuration')),
                ('entry_conditions', models.JSONField(default=dict, help_text='Who can enter this workflow')),
                ('exit_conditions', models.JSONField(default=dict, help_text='Automatic exit conditions')),
                ('workflow_steps', models.JSONField(default=list, help_text='Ordered list of workflow steps')),
                ('decision_logic', models.JSONField(default=dict, help_text='Branching and decision rules')),
                ('max_participants', models.IntegerField(blank=True, help_text='Max concurrent participants', null=True)),
                ('execution_window', models.JSONField(default=dict, help_text='Time windows for execution')),
                ('frequency_cap', models.JSONField(default=dict, help_text='Frequency limitations')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('is_recurring', models.BooleanField(default=False)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('total_participants', models.IntegerField(default=0)),
                ('active_participants', models.IntegerField(default=0)),
                ('completed_participants', models.IntegerField(default=0)),
                ('conversion_rate', models.FloatField(default=0.0)),
                ('avg_completion_time', models.DurationField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_executed', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='workflows', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='marketing.workflowtemplate')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('action_type', models.CharField(choices=[('email_send', 'Send Email'), ('sms_send', 'Send SMS'), ('webhook_call', 'Call Webhook'), ('api_request', 'API Request'), ('tag_operation', 'Tag Operation'), ('score_update', 'Update Score'), ('data_update', 'Update Data'), ('notification', 'Send Notification'), ('task_creation', 'Create Task'), ('integration_sync', 'Sync with Integration')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('config_template', models.JSONField(default=dict, help_text='Configuration template')),
                ('required_parameters', models.JSONField(default=list)),
                ('optional_parameters', models.JSONField(default=list)),
                ('is_async', models.BooleanField(default=False)),
                ('timeout_seconds', models.IntegerField(default=30)),
                ('retry_policy', models.JSONField(default=dict)),
                ('usage_count', models.IntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0)),
                ('avg_execution_time', models.DurationField(blank=True, null=True)),
                ('is_system', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowTrigger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('trigger_type', models.CharField(choices=[('event', 'User Event'), ('schedule', 'Time-based Schedule'), ('condition', 'Condition Met'), ('api', 'API Trigger'), ('form_submission', 'Form Submission'), ('page_visit', 'Page Visit'), ('email_interaction', 'Email Interaction'), ('score_threshold', 'Lead Score Threshold'), ('tag_change', 'Tag Addition/Removal'), ('date_field', 'Date Field Trigger')], max_length=50)),
                ('conditions', models.JSONField(default=dict, help_text='Trigger conditions')),
                ('filters', models.JSONField(default=dict, help_text='Additional filters')),
                ('schedule_config', models.JSONField(default=dict, help_text='Schedule configuration')),
                ('is_active', models.BooleanField(default=True)),
                ('max_triggers_per_user', models.IntegerField(blank=True, null=True)),
                ('cooldown_period', models.DurationField(blank=True, null=True)),
                ('trigger_count', models.IntegerField(default=0)),
                ('last_triggered', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='triggers', to='marketing.marketingworkflow')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('step_number', models.IntegerField()),
                ('step_type', models.CharField(choices=[('email', 'Send Email'), ('sms', 'Send SMS'), ('webhook', 'Webhook Call'), ('delay', 'Wait/Delay'), ('condition', 'Conditional Branch'), ('tag', 'Add/Remove Tag'), ('score', 'Update Lead Score'), ('task', 'Create Task'), ('notification', 'Send Notification'), ('api_call', 'External API Call'), ('form', 'Display Form'), ('redirect', 'Page Redirect'), ('personalization', 'Update Personalization')], max_length=50)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('config', models.JSONField(default=dict, help_text='Step-specific configuration')),
                ('conditions', models.JSONField(default=dict, help_text='Execution conditions')),
                ('next_steps', models.JSONField(default=list, help_text='Possible next steps')),
                ('delay_before', models.DurationField(blank=True, help_text='Delay before execution', null=True)),
                ('delay_after', models.DurationField(blank=True, help_text='Delay after execution', null=True)),
                ('retry_attempts', models.IntegerField(default=3)),
                ('timeout_duration', models.DurationField(blank=True, null=True)),
                ('execution_count', models.IntegerField(default=0)),
                ('success_count', models.IntegerField(default=0)),
                ('failure_count', models.IntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0)),
                ('avg_execution_time', models.DurationField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_step', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='marketing.workflowstep')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='marketing.marketingworkflow')),
            ],
            options={
                'ordering': ['step_number'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('participant_id', models.CharField(help_text='External participant identifier', max_length=200)),
                ('participant_data', models.JSONField(default=dict, help_text='Participant context data')),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('failed', 'Failed'), ('exited', 'Exited')], default='active', max_length=20)),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('entered_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('next_execution', models.DateTimeField(blank=True, null=True)),
                ('steps_completed', models.JSONField(default=list)),
                ('execution_history', models.JSONField(default=list, help_text='Step execution log')),
                ('conversion_events', models.JSONField(default=list)),
                ('current_step', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='marketing.workflowstep')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='marketing.marketingworkflow')),
            ],
        ),
        migrations.CreateModel(
            name='WorkflowExecution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('execution_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('success', 'Success'), ('failed', 'Failed'), ('skipped', 'Skipped'), ('timeout', 'Timeout')], default='pending', max_length=20)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.DurationField(blank=True, null=True)),
                ('input_data', models.JSONField(default=dict)),
                ('output_data', models.JSONField(default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('execution_context', models.JSONField(default=dict)),
                ('triggered_by', models.CharField(blank=True, max_length=100)),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='marketing.workflowparticipant')),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='marketing.workflowstep')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_entries', models.IntegerField(default=0)),
                ('unique_participants', models.IntegerField(default=0)),
                ('completion_rate', models.FloatField(default=0.0)),
                ('dropout_rate', models.FloatField(default=0.0)),
                ('avg_completion_time', models.DurationField(blank=True, null=True)),
                ('fastest_completion', models.DurationField(blank=True, null=True)),
                ('slowest_completion', models.DurationField(blank=True, null=True)),
                ('bottleneck_steps', models.JSONField(default=list, help_text='Steps causing delays')),
                ('high_failure_steps', models.JSONField(default=list, help_text='Steps with high failure rates')),
                ('optimization_suggestions', models.JSONField(default=list)),
                ('conversion_goals', models.JSONField(default=dict)),
                ('goal_completion_rates', models.JSONField(default=dict)),
                ('revenue_attribution', models.JSONField(default=dict)),
                ('performance_by_time', models.JSONField(default=dict, help_text='Performance by hour/day/week')),
                ('seasonal_patterns', models.JSONField(default=dict)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
                ('workflow', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='marketing.marketingworkflow')),
            ],
        ),
        migrations.AddConstraint(
            model_name='workflowstep',
            constraint=models.UniqueConstraint(fields=('workflow', 'step_number'), name='unique_workflow_step'),
        ),
        migrations.AddConstraint(
            model_name='workflowparticipant',
            constraint=models.UniqueConstraint(fields=('workflow', 'participant_id'), name='unique_workflow_participant'),
        ),
    ]