# Generated migration for analytics models

from django.db import migrations, models
import django.db.models.deletion
from django.conf import settings
import django.utils.timezone
import uuid
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('marketing', '0005_workflow_models'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AttributionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('attribution_type', models.CharField(choices=[('first_touch', 'First Touch'), ('last_touch', 'Last Touch'), ('linear', 'Linear Attribution'), ('time_decay', 'Time Decay'), ('position_based', 'Position Based (40-20-40)'), ('data_driven', 'Data-Driven Attribution'), ('custom', 'Custom Attribution')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('attribution_config', models.JSONField(default=dict, help_text='Attribution model configuration')),
                ('lookback_window_days', models.IntegerField(default=30, help_text='Attribution lookback window')),
                ('conversion_events', models.JSONField(default=list, help_text='Events to attribute')),
                ('channel_mapping', models.JSONField(default=dict, help_text='Channel attribution mapping')),
                ('first_touch_weight', models.FloatField(default=0.4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('last_touch_weight', models.FloatField(default=0.4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('middle_touch_weight', models.FloatField(default=0.2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('decay_rate', models.FloatField(default=0.5, help_text='Time decay rate (0-1)')),
                ('half_life_days', models.IntegerField(default=7, help_text='Half-life in days for time decay')),
                ('accuracy_score', models.FloatField(default=0.0, help_text='Model accuracy score')),
                ('usage_count', models.IntegerField(default=0)),
                ('last_calculated', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_default', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CustomerJourney',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('journey_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('customer_id', models.CharField(help_text='External customer identifier', max_length=200)),
                ('session_id', models.CharField(blank=True, max_length=200)),
                ('start_timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_timestamp', models.DateTimeField(blank=True, null=True)),
                ('total_duration', models.DurationField(blank=True, null=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('current_stage', models.CharField(choices=[('awareness', 'Awareness'), ('interest', 'Interest'), ('consideration', 'Consideration'), ('intent', 'Intent'), ('evaluation', 'Evaluation'), ('purchase', 'Purchase'), ('retention', 'Retention'), ('advocacy', 'Advocacy')], default='awareness', max_length=50)),
                ('stages_completed', models.JSONField(default=list, help_text='Completed journey stages')),
                ('conversion_events', models.JSONField(default=list, help_text='Conversion events in journey')),
                ('touchpoints', models.JSONField(default=list, help_text='All customer touchpoints')),
                ('channels_used', models.JSONField(default=list, help_text='Marketing channels used')),
                ('devices_used', models.JSONField(default=list, help_text='Devices used in journey')),
                ('total_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('attributed_value', models.JSONField(default=dict, help_text='Value attributed to each channel')),
                ('path_length', models.IntegerField(default=0, help_text='Number of touchpoints')),
                ('unique_channels', models.IntegerField(default=0, help_text='Number of unique channels')),
                ('time_to_conversion', models.DurationField(blank=True, null=True)),
                ('customer_segment', models.CharField(blank=True, max_length=100)),
                ('journey_type', models.CharField(blank=True, help_text='Journey classification', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attribution_model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='marketing.attributionmodel')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PredictiveModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('model_type', models.CharField(choices=[('lead_scoring', 'Lead Scoring'), ('churn_prediction', 'Churn Prediction'), ('ltv_prediction', 'Lifetime Value Prediction'), ('conversion_probability', 'Conversion Probability'), ('next_best_action', 'Next Best Action'), ('channel_optimization', 'Channel Optimization'), ('budget_allocation', 'Budget Allocation'), ('campaign_performance', 'Campaign Performance Prediction')], max_length=50)),
                ('algorithm', models.CharField(choices=[('logistic_regression', 'Logistic Regression'), ('random_forest', 'Random Forest'), ('gradient_boosting', 'Gradient Boosting'), ('neural_network', 'Neural Network'), ('svm', 'Support Vector Machine'), ('naive_bayes', 'Naive Bayes'), ('ensemble', 'Ensemble Method')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('features', models.JSONField(default=list, help_text='Features used in the model')),
                ('hyperparameters', models.JSONField(default=dict, help_text='Model hyperparameters')),
                ('training_config', models.JSONField(default=dict, help_text='Training configuration')),
                ('accuracy', models.FloatField(default=0.0)),
                ('precision', models.FloatField(default=0.0)),
                ('recall', models.FloatField(default=0.0)),
                ('f1_score', models.FloatField(default=0.0)),
                ('auc_score', models.FloatField(default=0.0)),
                ('is_trained', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('training_data_size', models.IntegerField(default=0)),
                ('last_trained', models.DateTimeField(blank=True, null=True)),
                ('last_prediction', models.DateTimeField(blank=True, null=True)),
                ('version', models.CharField(default='1.0', max_length=50)),
                ('model_file_path', models.CharField(blank=True, max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MarketingROI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roi_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('calculation_period', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly'), ('campaign', 'Campaign-based'), ('custom', 'Custom Period')], max_length=50)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('total_investment', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('channel_investments', models.JSONField(default=dict, help_text='Investment by channel')),
                ('campaign_investments', models.JSONField(default=dict, help_text='Investment by campaign')),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('attributed_revenue', models.JSONField(default=dict, help_text='Revenue by attribution source')),
                ('conversion_value', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('roi_percentage', models.FloatField(default=0.0, help_text='Return on Investment %')),
                ('roas', models.FloatField(default=0.0, help_text='Return on Ad Spend')),
                ('cost_per_acquisition', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('customer_lifetime_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_leads', models.IntegerField(default=0)),
                ('total_conversions', models.IntegerField(default=0)),
                ('conversion_rate', models.FloatField(default=0.0)),
                ('cost_per_lead', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('channel_performance', models.JSONField(default=dict, help_text='Performance by channel')),
                ('top_performing_channels', models.JSONField(default=list)),
                ('underperforming_channels', models.JSONField(default=list)),
                ('calculation_method', models.JSONField(default=dict, help_text='ROI calculation methodology')),
                ('data_sources', models.JSONField(default=list, help_text='Data sources used')),
                ('assumptions', models.JSONField(default=dict, help_text='Calculation assumptions')),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('attribution_model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='marketing.attributionmodel')),
                ('calculated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-calculated_at'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('dashboard_type', models.CharField(choices=[('executive', 'Executive Summary'), ('campaign', 'Campaign Performance'), ('channel', 'Channel Performance'), ('roi', 'ROI Analysis'), ('attribution', 'Attribution Analysis'), ('predictive', 'Predictive Analytics'), ('custom', 'Custom Dashboard')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('widgets', models.JSONField(default=list, help_text='Dashboard widget configurations')),
                ('layout', models.JSONField(default=dict, help_text='Dashboard layout settings')),
                ('filters', models.JSONField(default=dict, help_text='Available filters')),
                ('data_sources', models.JSONField(default=list, help_text='Connected data sources')),
                ('refresh_interval', models.CharField(choices=[('real_time', 'Real-time'), ('5_minutes', '5 Minutes'), ('15_minutes', '15 Minutes'), ('hourly', 'Hourly'), ('daily', 'Daily'), ('manual', 'Manual Refresh')], default='hourly', max_length=20)),
                ('time_range', models.JSONField(default=dict, help_text='Default time range')),
                ('is_public', models.BooleanField(default=False)),
                ('last_updated', models.DateTimeField(blank=True, null=True)),
                ('cache_duration', models.IntegerField(default=300, help_text='Cache duration in seconds')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('allowed_users', models.ManyToManyField(blank=True, related_name='accessible_dashboards', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_dashboards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('alert_type', models.CharField(choices=[('threshold', 'Threshold Alert'), ('anomaly', 'Anomaly Detection'), ('trend', 'Trend Alert'), ('performance', 'Performance Alert'), ('budget', 'Budget Alert'), ('roi', 'ROI Alert'), ('conversion', 'Conversion Rate Alert')], max_length=50)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('metric', models.CharField(help_text='Metric to monitor', max_length=100)),
                ('threshold_value', models.FloatField(help_text='Alert threshold')),
                ('comparison_operator', models.CharField(default='>', help_text='>, <, >=, <=, ==', max_length=10)),
                ('check_frequency', models.CharField(default='hourly', max_length=20)),
                ('time_window', models.JSONField(default=dict, help_text='Time window for evaluation')),
                ('conditions', models.JSONField(default=dict, help_text='Additional alert conditions')),
                ('notification_channels', models.JSONField(default=list, help_text='Notification channels')),
                ('recipients', models.JSONField(default=list, help_text='Alert recipients')),
                ('is_active', models.BooleanField(default=True)),
                ('last_triggered', models.DateTimeField(blank=True, null=True)),
                ('trigger_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TouchpointEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('event_type', models.CharField(choices=[('page_view', 'Page View'), ('email_open', 'Email Open'), ('email_click', 'Email Click'), ('ad_click', 'Ad Click'), ('social_engagement', 'Social Media Engagement'), ('form_submission', 'Form Submission'), ('download', 'Content Download'), ('webinar_attendance', 'Webinar Attendance'), ('demo_request', 'Demo Request'), ('purchase', 'Purchase'), ('support_contact', 'Support Contact'), ('referral', 'Referral')], max_length=50)),
                ('channel', models.CharField(choices=[('organic_search', 'Organic Search'), ('paid_search', 'Paid Search'), ('social_media', 'Social Media'), ('email', 'Email Marketing'), ('direct', 'Direct Traffic'), ('referral', 'Referral'), ('display', 'Display Advertising'), ('affiliate', 'Affiliate'), ('webinar', 'Webinar'), ('content', 'Content Marketing'), ('pr', 'Public Relations'), ('events', 'Events')], max_length=50)),
                ('campaign_id', models.CharField(blank=True, max_length=200)),
                ('content_id', models.CharField(blank=True, max_length=200)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('sequence_number', models.IntegerField(help_text='Order in journey')),
                ('time_since_previous', models.DurationField(blank=True, null=True)),
                ('page_url', models.URLField(blank=True)),
                ('referrer_url', models.URLField(blank=True)),
                ('utm_source', models.CharField(blank=True, max_length=200)),
                ('utm_medium', models.CharField(blank=True, max_length=200)),
                ('utm_campaign', models.CharField(blank=True, max_length=200)),
                ('utm_content', models.CharField(blank=True, max_length=200)),
                ('utm_term', models.CharField(blank=True, max_length=200)),
                ('device_type', models.CharField(blank=True, max_length=50)),
                ('browser', models.CharField(blank=True, max_length=100)),
                ('operating_system', models.CharField(blank=True, max_length=100)),
                ('location', models.JSONField(default=dict, help_text='Geographic location data')),
                ('attribution_weight', models.FloatField(default=0.0, help_text='Attribution weight for this touchpoint')),
                ('attributed_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('session_duration', models.DurationField(blank=True, null=True)),
                ('pages_viewed', models.IntegerField(default=1)),
                ('engagement_score', models.FloatField(default=0.0, help_text='Engagement quality score')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('journey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='marketing.customerjourney')),
            ],
            options={
                'ordering': ['sequence_number'],
            },
        ),
        migrations.CreateModel(
            name='PredictionResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('target_id', models.CharField(help_text='ID of predicted entity', max_length=200)),
                ('target_type', models.CharField(help_text='Type of entity (lead, customer, etc.)', max_length=50)),
                ('prediction_value', models.FloatField(help_text='Predicted value/probability')),
                ('confidence_score', models.FloatField(default=0.0, help_text='Prediction confidence')),
                ('prediction_class', models.CharField(blank=True, help_text='Predicted class', max_length=100)),
                ('feature_contributions', models.JSONField(default=dict, help_text='Feature contribution to prediction')),
                ('input_features', models.JSONField(default=dict, help_text='Input features used')),
                ('prediction_timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('batch_id', models.CharField(blank=True, help_text='Batch prediction ID', max_length=200)),
                ('actual_value', models.FloatField(blank=True, help_text='Actual outcome for validation', null=True)),
                ('is_validated', models.BooleanField(default=False)),
                ('validation_timestamp', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='marketing.predictivemodel')),
            ],
            options={
                'ordering': ['-prediction_timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='customerjourney',
            index=models.Index(fields=['customer_id', 'start_timestamp'], name='marketing_cu_custome_57b5e6_idx'),
        ),
        migrations.AddIndex(
            model_name='customerjourney',
            index=models.Index(fields=['current_stage', 'is_complete'], name='marketing_cu_current_e89e97_idx'),
        ),
        migrations.AddIndex(
            model_name='touchpointevent',
            index=models.Index(fields=['journey', 'timestamp'], name='marketing_to_journey_e4ae49_idx'),
        ),
        migrations.AddIndex(
            model_name='touchpointevent',
            index=models.Index(fields=['channel', 'event_type'], name='marketing_to_channel_0d582a_idx'),
        ),
        migrations.AddIndex(
            model_name='predictionresult',
            index=models.Index(fields=['model', 'prediction_timestamp'], name='marketing_pr_model_i_a0cb3b_idx'),
        ),
        migrations.AddIndex(
            model_name='predictionresult',
            index=models.Index(fields=['target_id', 'target_type'], name='marketing_pr_target__0c9b24_idx'),
        ),
        migrations.AddIndex(
            model_name='marketingroi',
            index=models.Index(fields=['start_date', 'end_date'], name='marketing_ma_start_d_51e43e_idx'),
        ),
        migrations.AddIndex(
            model_name='marketingroi',
            index=models.Index(fields=['calculation_period'], name='marketing_ma_calcula_c96a76_idx'),
        ),
        migrations.AddConstraint(
            model_name='predictivemodel',
            constraint=models.UniqueConstraint(fields=('name', 'version'), name='unique_model_version'),
        ),
    ]